// Generated by CoffeeScript 1.10.0

/*
 * Wand
Created by Aaron Delaney for a DCU Assignment

Refer to README for more information
 */

(function() {
  var Config, EditorController, EditorModel, EditorView, check_spelling, config, countStr, editor_controller, editor_model, editor_view, get_reccomendations_edit_distance,
    indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  EditorView = (function() {
    function EditorView(config1) {
      this.config = config1;
      if (this.config.debug) {
        console.log("+ Initiating EditorView");
      }
      this.word_count = this.config.welcome_text_length;
      this.misspelled = [];
      this.initContainer();
      this.initTextArea();
      this.initInfoArea();
      this.updateWindowSize();
    }

    EditorView.prototype.initContainer = function() {
      $('body').append('<div id="container"></div>');
      return this.container = $('#container');
    };

    EditorView.prototype.initTextArea = function() {
      this.updateSize();
      this.container.append("<div id=\"text\" contenteditable=\"true\" spellcheck=\"false\">" + this.config.welcome_text + "</div>");
      return this.textarea = $("#text");
    };

    EditorView.prototype.initInfoArea = function() {
      this.container.append("<div id=\"info\">\n" + (this.infoHTML(this.word_count, this.misspelled)) + "\n</div>");
      return this.info = $("#info");
    };

    EditorView.prototype.drawInfo = function() {
      return this.info.html(this.infoHTML(this.word_count, this.misspelled));
    };

    EditorView.prototype.updateSize = function() {
      var h, w;
      w = $(window).innerWidth() / 20 * 19;
      h = $(window).innerHeight() / 20 * 19;
      this.container_height = h + "px";
      return this.container_width = w + "px";
    };

    EditorView.prototype.updateWindowSize = function() {
      this.updateSize();
      this.container.css("height", this.container_height);
      return this.container.css("width", this.container_width);
    };

    EditorView.prototype.format_misspelling = function(l) {
      var i, len, other_spellings, s, spelling, word;
      s = "";
      for (word in l) {
        other_spellings = l[word];
        s += "<ul class='misspelling'><b>" + word + "</b>";
        for (i = 0, len = other_spellings.length; i < len; i++) {
          spelling = other_spellings[i];
          s += "<li>" + spelling + "</li>";
        }
        s += "</ul>";
      }
      return s;
    };

    EditorView.prototype.infoHTML = function(word_count, mispellings) {
      return "<h1>Wand /*</h1>\nword count: " + this.word_count + "\n<br>\nmisspelled words:\n<br>\n" + (this.format_misspelling(this.misspelled));
    };

    return EditorView;

  })();


  /*
   * Wand
  Created by Aaron Delaney for a DCU Assignment
  
  Refer to README for more information
   */

  countStr = function(string, regex) {
    var count, i, len, ref, word;
    count = 0;
    console.log(string);
    console.log(string.match(regex));
    ref = string.match(regex);
    for (i = 0, len = ref.length; i < len; i++) {
      word = ref[i];
      if (word.length > 0) {
        count += 1;
      }
    }
    return count;
  };

  get_reccomendations_edit_distance = function(word, length, wordlist) {
    return ["asdf", 'casdf'];
  };

  check_spelling = function(string, word_regex, word_list, recommend_length) {
    var i, len, misspelled, ref, ref1, word;
    misspelled = {};
    if (word_list.length === 0) {
      return misspelled;
    }
    ref = string.match(word_regex);
    for (i = 0, len = ref.length; i < len; i++) {
      word = ref[i];
      if (indexOf.call(misspelled, word) < 0 && word.length > 1 && (ref1 = word.toLowerCase(), indexOf.call(word_list, ref1) < 0)) {
        misspelled[word] = get_reccomendations_edit_distance(word);
      }
    }
    return misspelled;
  };

  EditorModel = (function() {
    function EditorModel(config1, view) {
      this.config = config1;
      this.view = view;
      if (this.config.debug) {
        console.log("+ Iniating Model");
      }
      this.text = this.config.welcome_text;
      this.container = this.view.container;
      this.word_regex = /[^\W]([A-Za-z]+)[^\W]/ig;
    }

    EditorModel.prototype.updateText = function() {
      if (this.text !== this.view.textarea.html()) {
        this.text = this.view.textarea.html();
        this.updateInfo();
        return this.view.drawInfo();
      }
    };

    EditorModel.prototype.updateInfo = function() {
      this.view.word_count = countStr(this.text, this.word_regex);
      return this.view.misspelled = check_spelling(this.text, this.word_regex, this.config.word_list, this.config.recommend_length);
    };

    EditorModel.prototype.updateWindowSize = function() {
      return this.view.updateWindowSize();
    };

    return EditorModel;

  })();


  /*
   * Wand
  Created by Aaron Delaney for a DCU Assignment
  
  Refer to README for more information
   */

  EditorController = (function() {
    function EditorController(config1, model) {
      this.config = config1;
      this.model = model;
      if (this.config.debug) {
        console.log("+ Initiating EditorController");
      }
      this.skipped_renders = 0;
      this.setupEvents();
    }

    EditorController.prototype.setupEvents = function() {
      $(window).resize((function(_this) {
        return function() {
          return _this.model.updateWindowSize();
        };
      })(this));
      return this.model.container.on('keypress focus', (function(_this) {
        return function(event) {
          if (event.type === "keypress") {
            if (_this.skipped_renders < 4 || event.which === 32 || event.which === 13 || event.which === 8 || event.which === 17) {
              _this.model.updateText();
              return _this.skipped_renders = 0;
            } else {
              return _this.skipped_renders += 1;
            }
          } else {
            return _this.model.updateText();
          }
        };
      })(this));
    };

    return EditorController;

  })();


  /*
   * Wand
  Created by Aaron Delaney for a DCU Assignment
  
  Refer to README for more information
   */

  Config = (function() {
    function Config() {
      this.debug = true;
      this.welcome_text = "Welcome to wand";
      this.welcome_text_length = 3;
      this.word_list = [];
      this.wordlist_url = "https://raw.githubusercontent.com/sindresorhus/word-list/master/words.txt";
      this.wordlist_request = $.ajax(this.wordlist_url, {
        cache: true,
        crossDomain: true,
        dataType: "text"
      }).done((function(_this) {
        return function(data, textStatus, jqXHR) {
          if (_this.debug) {
            console.log("Finished downloading wordlist");
          }
          return _this.word_list = data.split(/\n/);
        };
      })(this));
      this.length_of_reccomends = 4;
    }

    return Config;

  })();


  /*
  Wand
  -> Created by Aaron Delaney for a DCU Assignment
  Refer to:
  -> the README, included in the root of this project
   */

  config = new Config();

  editor_view = new EditorView(config);

  editor_model = new EditorModel(config, editor_view);

  editor_controller = new EditorController(config, editor_model);

}).call(this);
